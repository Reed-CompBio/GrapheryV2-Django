from __future__ import annotations

from uuid import uuid4

from django.db import models


class UUIDMixin(models.Model):
    class Meta:
        abstract = True

    id = models.UUIDField(primary_key=True, default=uuid4, editable=False)


class TimeDateMixin(models.Model):
    class Meta:
        abstract = True

    created_time = models.DateTimeField(auto_now_add=True)
    modified_time = models.DateTimeField(auto_now=True)


class Status(models.TextChoices):
    DRAFT = "DRAFT", "draft"
    PUBLISHED = "PUBLISHED", "published"
    REVIEWING = "REVIEWING", "reviewing"
    PRIVATE = "PRIVATE", "private"
    TRASH = "TRASH", "trash"
    AUTOSAVE = "AUTOSAVE", "autosave"
    CLOSED = "CLOSED", "closed"


class StatusMixin(models.Model):
    class Meta:
        abstract = True

    _default_status = Status.DRAFT

    item_status = models.CharField(
        max_length="15", choices=Status.choices, default=Status.DRAFT
    )


class LangMixin(models.Model):
    class Meta:
        abstract = True

    lang_code = models.CharField(max_length=8)


def generate_group_name(tag: str | UserRoles) -> str:
    if isinstance(tag, str):
        tag = UserRoles(tag)
    elif not isinstance(tag, UserRoles):
        raise TypeError(
            "group name can only be generated by UserRoles instance or a role string"
        )

    return f"{tag.label} group"


class UserRoles(models.TextChoices):
    ADMINISTRATOR = "ADMINISTRATOR", "administrator"
    EDITOR = "EDITOR", "editor"
    AUTHOR = "AUTHOR", "author"
    TRANSLATOR = "TRANSLATOR", "translator"
    VISITOR = "VISITOR", "visitor"
    READER = "READER", "reader"

    @property
    def group_name(self) -> str:
        return generate_group_name(self)
